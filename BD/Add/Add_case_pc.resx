<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAG9oZmpvaGbLb2hmzG9oZsxvaGbMb2hmzG9oZsxvaGbMb2hmzG9oZsxvaGbMb2hmzW9o
        ZsNvaGY7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABvaGYIb2hm6m9oZv9vaGb/b2hm/29oZv9vaGb/b2hm/29oZv9vaGb/b2hm/29o
        Zv9vaGb/b2hm/29oZqkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAG9oZgFvaGZ2b2hm2W9oZv9vaGb/b2hm/29oZv9vaGb/b2hm/29o
        Zv9vaGb/b2hm/29oZvVvaGbQb2hmRQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAb2hmWW9oZstvaGbLb2hmym9o
        ZspvaGbKb2hmym9oZs1vaGbCb2hmKQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABvaGYLb2hmTm9oZmBvaGZeb2hmXm9oZl5vaGZeb2hmXW9oZltvaGZWb2hmYm9o
        ZmJvaGZib2hmYm9oZmJvaGZib2hmYm9oZl9vaGZWb2hmW29oZl5vaGZeb2hmXm9oZl5vaGZeb2hmYG9o
        Zk5vaGYLAAAAAAAAAAAAAAAAAAAAAG9oZptvaGb/b2hm/29oZv9vaGb/b2hm/29oZv9vaGb/b2hm/29o
        Zv9vaGb/b2hm/29oZv9vaGb/b2hm/29oZv9vaGb/b2hm/29oZv9vaGb/b2hm/29oZv9vaGb/b2hm/29o
        Zv9vaGb/b2hm/29oZpoAAAAAAAAAAAAAAAAAAAAAb2hmwW9oZv9vaGb/b2hm/29oZv9vaGb/b2hm/29o
        Zv9vaGb/b2hm/29oZv9vaGb/b2hm/29oZv9vaGb/b2hm/29oZv9vaGb/b2hm/29oZv9vaGb/b2hm/29o
        Zv9vaGb/b2hm/29oZv9vaGb/b2hmwQAAAAAAAAAAAAAAAAAAAABvaGayb2hm/29oZv9vaGb/b2hm/29o
        Zv9vaGb/b2hm/29oZv9vaGb/b2hm/29oZv9vaGb/b2hm/29oZv9vaGb/b2hm/29oZv9vaGb/b2hm/29o
        Zv9vaGb/b2hm/29oZv9vaGb/b2hm/29oZv9vaGayAAAAAAAAAAAAAAAAAAAAAG9oZqpvaGb/b2hm/29o
        Zv9vaGb/b2hm/29oZv9vaGb/b2hm/29oZv9vaGb/b2hm/29oZv9vaGb/b2hm/29oZv9vaGb/b2hm/29o
        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
        AAAAAAAAAAAAAG9oZmZvaGb/b2hmpgAAAAAAAAAAAAAAAAAAAABvaGanb2hm/29oZlwAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAG9oZi1vaGZ8b2hmo29oZqJvaGZ2b2hmIwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAb2hmXW9oZv9vaGamAAAAAAAAAAAAAAAAAAAAAG9oZqpvaGb/b2hmnW9o
        ZlpvaGZdb2hmXW9oZl1vaGZdb2hmXW9oZl1vaGZcb2hmU29oZk9vaGZSb2hmUm9oZk9vaGZUb2hmXG9o
        Zl1vaGZdb2hmXW9oZl1vaGZdb2hmXW9oZlpvaGaeb2hm/29oZqoAAAAAAAAAAAAAAAAAAAAAb2hmnW9o
        Zv9vaGb/b2hm/29oZv9vaGb/b2hm/29oZv9vaGb/b2hm/29oZv9vaGb/b2hm/29oZv9vaGb/b2hm/29o
        Zv9vaGb/b2hm/29oZv9vaGb/b2hm/29oZv9vaGb/b2hm/29oZv9vaGb/b2hmnAAAAAAAAAAAAAAAAAAA
        AABvaGYsb2hmxW9oZuRvaGbib2hm4m9oZuJvaGbib2hm4m9oZuJvaGbib2hm4m9oZuJvaGbib2hm4m9o
        ZuJvaGbib2hm4m9oZuJvaGbib2hm4m9oZuJvaGbib2hm4m9oZuJvaGbib2hm5G9oZsVvaGYsAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////////////////////+AAf//AAH//wAB///gB//AAAADwAAAA8AA
        AAPAAAADwAAAA8AAAAPHwB/jx4AP48fgB+PHwgPjx4AD48eAAePHgAHjx4AB48eEAePHwAPjx8AD48fg
        B+PH+B/jwAAAA8AAAAPAAAAD//////////8=
</value>
  </data>
</root>